<?xml version="1.0" encoding="UTF-8"?>
<!-- components\topMenu\popUpWindows\RegisterForm.mxml -->
<s:VGroup name="IncomingMessageForm" paddingLeft="10" paddingTop="10" paddingRight="10"
          xmlns="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx" width="100%">

  <s:states>
    <s:State name="messages"/>
    <s:State name="nomessages"/>
  </s:states>

  <Script><![CDATA[
    import mx.collections.ArrayCollection;
    import mx.controls.Alert;
    import mx.core.IFlexDisplayObject;
    import mx.effects.easing.Circular;
    import mx.events.ItemClickEvent;
    import mx.events.ValidationResultEvent;
    import mx.rpc.events.FaultEvent;
    import mx.rpc.events.ResultEvent;

    import mx.rpc.remoting.mxml.RemoteObject;

    import mx.validators.Validator;

    import site.model.FlexMessage;
    import site.util.UserHandler;

    import spark.components.Button;

    [Bindable]
    private var formIsValid:Boolean = false;
    private var focussedFormControl:DisplayObject;
    private var incomingMessages:ArrayCollection = new ArrayCollection();
    private var selectedIncomingMessageId:Number = -1;
    private var selectedSenderId:Number;
    private var formMessageButton:Button;
    private var messagesTimer:Timer;

    public function setFormButton(button:Button):void {
      formMessageButton = button;
    }

    private function validateForm(event:Event):void {
      focussedFormControl = event.target as DisplayObject;
      formIsValid = true;
      validate(messageSubjectValidator);
      validate(messageTextValidator);
    }

    private function validate(validator:Validator):Boolean {
      var validatorSource:DisplayObject = validator.source as DisplayObject;
      var suppressEvents:Boolean = (validatorSource != focussedFormControl);
      var event:ValidationResultEvent = validator.validate(null, suppressEvents);
      var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
      formIsValid = formIsValid && currentControlIsValid;
      return currentControlIsValid;
    }

    private function refreshIncomingMesssage():void {
      refreshMessageButton.enabled = false;
      incomingMessageDataGrid.visible = false;
      incomingMessages.removeAll();
      if (UserHandler.isLoggedIn()) {
        var ro:RemoteObject = new RemoteObject("FD");
        //ro.showBusyCursor = true;
        ro.addEventListener("result", result);
        ro.addEventListener("fault", fault);
        ro.getIncomingMessageListByUserId(UserHandler.getUser().id);

        function result(event:ResultEvent):void {
          ro.removeEventListener("result", result);
          var messages:ArrayCollection = ArrayCollection(event.result);
          for each(var message:FlexMessage in messages) {
            incomingMessages.addItem({id:message.id, since:message.since, senderfirstName:message.senderFirstName, senderlastName:message.senderLastName, floor:message.senderFloor, senderApartment:message.senderApartment,
              senderLogin:message.senderLogin, senderId:message.senderId, subject:message.subject, shortSubject:(message.subject.length > 20 ? message.subject.substring(0, 20) + ".." : message.subject),
              text:message.text, shortText:(message.text.length > 50 ? message.text.substring(0, 50) + ".." : message.text)});
          }
          renderIncomingMessageDataGrid();
          formMessageButton.label = "in" + "(" + incomingMessages.length + ")";
        }

        function fault(event:FaultEvent):void {
          ro.removeEventListener("fault", fault);
          //Alert.show(event.toString());
        }
      }
    }

    private function renderIncomingMessageDataGrid():void {
      refreshMessageButton.enabled = true;
      replyMessageButton.enabled = replyMessageGroup.visible;
      delIncomingMessageButton.enabled = !selectedIncomingMessageId == -1;

      if (incomingMessages.length == 0) {
        currentState = "nomessages";
        (parent as IFlexDisplayObject).height = 100;
      } else {
        currentState = "messages";
        incomingMessageDataGrid.dataProvider = incomingMessages;
        incomingMessageDataGrid.height = 20 + (incomingMessageDataGrid.rowHeight + 1) * incomingMessages.length;
        (parent as IFlexDisplayObject).height = 64 + incomingMessageDataGrid.height + 27 + (replyMessageGroup.visible ? replyMessageGroup.height + 4 : 0);
        incomingMessageDataGrid.visible = true;
      }
    }

    private function incomingMessageItemClick(event:Event):void {
      replyMessageButton.enabled = true;
      delIncomingMessageButton.enabled = true;
      selectedIncomingMessageId = event.target.selectedItem.id;
      selectedSenderId = event.target.selectedItem.senderId;
      messageSubject.text = event.target.selectedItem.subject;
      messageText.text = event.target.selectedItem.text;
    }

    public function startAutoUpdate():void {
      messagesTimer = new Timer(240000, 0);
      messagesTimer.addEventListener(TimerEvent.TIMER, timerHandler);
      messagesTimer.start();
    }

    private function timerHandler(event:TimerEvent):void {
      refreshIncomingMesssage();
    }

    public function stopAutoUpdate():void {
      messagesTimer.removeEventListener(TimerEvent.TIMER, timerHandler);
      messagesTimer.stop();
      messagesTimer = null;
    }

    public function updateIncomingMessages():void {
      refreshIncomingMesssage();
    }

    private function createMessage():void {
      if (replyMessageGroup.visible) {
        replyMessageGroup.visible = false;
        (parent as IFlexDisplayObject).height = (parent as IFlexDisplayObject).height - (replyMessageGroup.height + 4);
        //PopUpManager.centerPopUp(parent as IFlexDisplayObject);
      } else {
        replyMessageGroup.visible = true;
        (parent as IFlexDisplayObject).height = (parent as IFlexDisplayObject).height + (replyMessageGroup.height + 4);
        //PopUpManager.centerPopUp(parent as IFlexDisplayObject);
      }
      //Alert.show(UserHandler.getUser().id.toString() + " " + UserHandler.getUser().firstName);
    }

    private function sendMessage():void {
      var message:FlexMessage = new FlexMessage();
      message.subject = messageSubject.text;
      message.text = messageText.text;
      message.senderId = UserHandler.getUser().id;
      message.recipientId = selectedSenderId;
      UserHandler.createMessage(message);
      messageSubject.text = "";
      messageText.text = "";
      sendMessageButton.enabled = false;
      replyMessageGroup.visible = false;
      (parent as IFlexDisplayObject).height = (parent as IFlexDisplayObject).height - (replyMessageGroup.height + 4);
      //(parent as IFlexDisplayObject).height = (parent as IFlexDisplayObject).height - (messageGroup.height + 4);
      UserHandler.userWindowsHandler.updateOutcomingMessages();
      //PopUpManager.centerPopUp(parent as IFlexDisplayObject);
    }

    private function delMessage():void {
      if (-1 != selectedIncomingMessageId) {
        UserHandler.delIncomingMessageById(selectedIncomingMessageId);
        refreshIncomingMesssage();
        selectedIncomingMessageId = -1;
        messageSubject.text = "";
        messageText.text = "";
        sendMessageButton.enabled = false;
        replyMessageGroup.visible = false;
      }
    }

    ]]></Script>

  <Declarations>
    <mx:StringValidator id="messageSubjectValidator" source="{messageSubject}" property="text" minLength="4"
                        triggerEvent="click" trigger="{sendMessageButton}"
                        tooShortError="напишите еще что нибуть" required="true"/>
    <mx:StringValidator id="messageTextValidator" source="{messageText}" property="text" minLength="7"
                        triggerEvent="click" trigger="{sendMessageButton}"
                        tooShortError="напишите чуть чуть больше" required="true"/>
  </Declarations>

  <s:Label id="noIncomingMessageText" text="нет сообщений" visible="true" includeIn="nomessages" fontSize="17"
           fontFamily="arial" fontWeight="bold" fontStyle="italic" paddingLeft="100"/>
  <s:VGroup includeIn="messages" id="incomingMessageButtons">
    <s:HGroup>
      <s:Button id="refreshMessageButton" width="24" height="24" toolTip="обновить" label="обновить"
                click="refreshIncomingMesssage()"
                skinClass="site.components.popUpWindows.buttonSkins.refreshIncomingMessageButton.Skin"/>
      <s:Button id="replyMessageButton" width="24" height="24" toolTip="ответить" label="ответить"
                click="createMessage()" skinClass="site.components.popUpWindows.buttonSkins.replyMessageButton.Skin"/>
      <s:Button id="delIncomingMessageButton" width="24" height="24" toolTip="удалить" label="удалить"
                click="delMessage()"
                skinClass="site.components.popUpWindows.buttonSkins.delMessageButton.Skin"/>
    </s:HGroup>

    <mx:DataGrid id="incomingMessageDataGrid" visible="true" height="0" width="730" fontSize="10" paddingTop="0"
                 fontFamily="tahoma"
                 itemClick="incomingMessageItemClick(event)" creationComplete="refreshIncomingMesssage();"
                 includeIn="messages">
      <mx:columns>
        <mx:DataGridColumn dataField="id" visible="false"/>
        <mx:DataGridColumn dataField="senderId" visible="false"/>
        <mx:DataGridColumn headerText="от" dataField="senderLogin" width="40"/>
        <mx:DataGridColumn headerText="этаж" dataField="floor" width="15"/>
        <mx:DataGridColumn headerText="кв." dataField="senderApartment" width="20"/>
        <mx:DataGridColumn headerText="дата" dataField="since" width="60"/>
        <mx:DataGridColumn headerText="заголовок" dataField="shortSubject" width="60"/>
        <mx:DataGridColumn headerText="текст" dataField="shortText" width="150"/>
        <mx:DataGridColumn dataField="subject" visible="false"/>
        <mx:DataGridColumn dataField="text" visible="false"/>
      </mx:columns>
    </mx:DataGrid>

    <s:BorderContainer id="replyMessageGroup" height="110" width="730" visible="false" fontFamily="tahoma"
                       fontSize="10"
                       borderColor="0x707070" backgroundAlpha="0.0" includeIn="messages">
      <mx:Form paddingTop="3">
        <mx:FormItem label="заголовок">
          <s:TextInput id="messageSubject" width="420" change="validateForm(event);" editable="false"/>
        </mx:FormItem>
        <mx:FormItem label="текст">
          <mx:TextArea id="messageText" width="420" height="50" change="validateForm(event);"/>
        </mx:FormItem>
        <mx:FormItem>
          <s:Button id="sendMessageButton" label="ответ" click="sendMessage()" enabled="{formIsValid}"/>
        </mx:FormItem>
      </mx:Form>
    </s:BorderContainer>

  </s:VGroup>
</s:VGroup>